/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.unibo.tuprolog.java.example;

import it.unibo.tuprolog.core.Struct;
import it.unibo.tuprolog.core.TermFormatter;
import it.unibo.tuprolog.core.parsing.TermParser;
import it.unibo.tuprolog.solve.Solution;
import it.unibo.tuprolog.solve.SolutionFormatter;
import it.unibo.tuprolog.solve.SolveOptions;
import it.unibo.tuprolog.solve.Solver;
import it.unibo.tuprolog.solve.SolverFactory;
import it.unibo.tuprolog.solve.classic.ClassicSolverFactory;
import it.unibo.tuprolog.solve.exception.TimeOutException;
import it.unibo.tuprolog.theory.Theory;
import it.unibo.tuprolog.theory.parsing.ClausesReader;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Iterator;

public class Example {

    private static InputStream openResource(String name) {
        return Example.class.getResourceAsStream(name);
    }

    public static void main(String[] args) throws IOException {
        BufferedReader stdinReader = new BufferedReader(new InputStreamReader(System.in));
        ClausesReader theoryReader = ClausesReader.getWithDefaultOperators();
        SolverFactory solverFactory = ClassicSolverFactory.INSTANCE; // or Solver.getClassic()
        SolutionFormatter defaultSolutionFormatter = SolutionFormatter.of(TermFormatter.prettyExpressions());

        InputStream input = args.length > 0 ? new FileInputStream(args[0]) : openResource("ExampleTheory.pl");

        Theory theory = theoryReader.readTheory(input);
        Solver solver = solverFactory.solverWithDefaultBuiltins(theory);

        System.out.println("# Successfully loaded " + input);
        System.out.println("# Currently loaded operators: " + solver.getOperators());
        TermParser termParser = TermParser.withOperators(solver.getOperators());

        while (true) {
            System.out.print("> ");
            var line = stdinReader.readLine();
            if (line == null) break;

            Struct query = termParser.parseStruct("evalExpr(" + line + ", Result)");

            Iterator<Solution> si = solver.solve(query, SolveOptions.allLazilyWithTimeout(1000)).iterator();
            while (si.hasNext()) {
                Solution solution = si.next();
                System.out.println(defaultSolutionFormatter.format(solution));
                System.out.println("----");
                handleSolutionManually(solution);
            }
        }

        System.out.println("# Goodbye!");
    }

    private static void handleSolutionManually(Solution solution) {
        if (solution instanceof Solution.Yes) {
            System.out.printf("yes: Result=%s.\n", solution.getSubstitution().getByName("Result"));
        } else if (solution instanceof Solution.No) {
            System.out.println("no.");
        } else if (solution instanceof Solution.Halt) {
            if (solution.getException() instanceof TimeOutException) {
                System.out.println("timeout.");
            } else {
                System.out.printf("halt: %s\n", solution.getException().getMessage());
                for (Struct procedure : solution.getException().getLogicStackTrace()) {
                    System.out.printf("\tat %s\n", procedure.getIndicator());
                }
            }
        }
    }

}
